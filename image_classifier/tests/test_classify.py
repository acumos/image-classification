# -*- coding: utf-8 -*-
"""
Tests dump functionality
"""
import json
import os
import tempfile

import pytest
import pandas as pd
import re

from cognita_client.wrap.load import load_model

from image_classifier.classify_image import keras_evaluate

_DATA_PATH =  os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../data/') # /a/b/c/d/e
_EXPECTED_CLASSES = {
    'elephant.jpg':("African elephant, Loxodonta africana", 0.8867059350013733),
    'model-t.jpg':("Model T", 0.9676347970962524),
    'cropped_panda.jpg':("giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca", 0.8978292346000671),
}
_LABEL_FILE = 'keras_class_names.txt'


def xx_not_ready_yet_test_image_classify_keras():
    '''Tests dumping with image classifier'''
    from image_classifier.keras.prediction_formatter import Formatter
    assert os.path.exists(_DATA_PATH)  # must have image test path
    target_model = None
    reStrip = re.compile(r"\W+")
    classifier_tolerance = 0.1

    import warnings

    with tempfile.TemporaryDirectory() as tdir:
        tdir = os.path.join(_DATA_PATH, 'test')

        for fileKey in _EXPECTED_CLASSES:
            train_path = os.path.join(_DATA_PATH, fileKey)
            assert os.path.isfile(train_path), "File: {:} not found".format(train_path) # must have image test path
            if False : #target_model is None:
                label_path = os.path.join(_DATA_PATH, _LABEL_FILE)
                assert os.path.isfile(label_path), "Label file: {:} not found".format(label_path) # must have image test path

                # this is one-time training to build and serialize the model
                keras_evaluate({'image': train_path, 'model_path': '', 'dump_model': tdir, 'label_path': label_path,
                                'num_top_predictions': 5})

            target_model = load_model(tdir)  # refers to ./model dir in pwd. generated by helper script also in this dir
            assert hasattr(target_model, 'transform')

            with open(train_path, 'rb') as fTrain:
                binStream = fTrain.read()
                X = pd.DataFrame([['image/jpeg', binStream]], columns=['mime_type', 'binary_stream'])
                resp = target_model.transform.from_native(X)
                pred = resp.as_native()

                warnings.warn("CLASS: {:}".format(pred[0:5]))
                warnings.resetwarnings()
                expected_score = _EXPECTED_CLASSES[fileKey]
                top_class = reStrip.sub("", pred[Formatter.COL_NAME_CLASS][0])
                test_class = reStrip.sub("", expected_score[0])
                assert top_class==test_class, "Failed class compare '{:}' vs '{:}' for sample {:}".format(top_class, test_class, fileKey)
                assert abs(pred[Formatter.COL_NAME_PREDICTION][0]-expected_score[1])<classifier_tolerance, \
                    "Failed bounded range check {:}, expected {:} +/- {:}".format(
                        pred[Formatter.COL_NAME_PREDICTION][0], expected_score[1], classifier_tolerance)

                # outC = os.path.join(tdir, "{}.class.csv".format(fileKey))
                # pred.to_csv(outC)
                # print("{:} -> {:}".format(train_path, pred))


if __name__ == '__main__':
    '''Test area'''
    pytest.main([__file__, ])
